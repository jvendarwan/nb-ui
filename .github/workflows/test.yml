name: Test nb-ui Components

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -r tests/requirements.txt

      - name: Install package in development mode
        run: pip install -e .

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          black --check --diff src/

      - name: Run tests with pytest
        run: |
          pytest tests/ \
            --verbose \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=75

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  test-notebooks:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install jupyter nbconvert

      - name: Install package
        run: pip install -e .

      - name: Test example notebooks
        run: |
          # Test that example notebooks execute without errors
          jupyter nbconvert --to notebook --execute demo_usage.ipynb --output demo_test.ipynb

      - name: Validate notebook outputs
        run: |
          # Basic validation that notebooks contain expected outputs
          python -c "
          import json

          # Check demo notebook
          with open('demo_test.ipynb') as f:
              demo_nb = json.load(f)

          # Verify notebook executed successfully
          assert any(cell.get('cell_type') == 'code' and 
                    cell.get('outputs') for cell in demo_nb['cells']), 'Demo notebook should have code outputs'

          print('✅ Demo notebook executed successfully')
          print('✅ All notebook tests passed!')
          "

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install package
        run: pip install -e .

      - name: Run integration tests
        run: |
          # Test component integration
          python -c "
          from nb_ui import Header, Card, Alert, Typography, Container

          # Test basic component creation
          header = Header('Test Header')
          alert = Alert('Test Alert', severity='info')
          card = Card('Test Card')
          text = Typography('Test Text')
          container = Container([header, alert])

          # Test rendering
          html = container.render()
          assert html.strip(), 'Integrated components should render'
          assert 'Test Header' in html, 'Should contain header text'
          assert 'Test Alert' in html, 'Should contain alert text'

          card_html = card.render()
          text_html = text.render()
          assert card_html.strip(), 'Card should render'
          assert text_html.strip(), 'Typography should render'

          print('✅ Integration test passed')
          "

      - name: Test theme integration
        run: |
          python -c "
          from nb_ui import Header, set_theme, get_theme, list_themes

          # Test theme functionality
          themes = list_themes()
          assert len(themes) > 0, 'Should have available themes'
          print(f'Available themes: {themes}')

          # Test theme switching
          original_theme = get_theme()
          set_theme('dark')
          dark_theme = get_theme()

          set_theme('material')
          material_theme = get_theme()

          # Test component with different themes
          header = Header('Test Header')
          html = header.render()
          assert html.strip(), 'Header should render with theme'

          print('✅ Theme integration test passed')
          "

  performance-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest-benchmark

      - name: Install package
        run: pip install -e .

      - name: Run performance tests
        run: |
          # Basic performance test
          python -c "
          import time
          from nb_ui import Header, Typography, Container

          # Test component creation performance
          start_time = time.time()

          # Create many components
          headers = [Header(f'Header {i}') for i in range(50)]
          texts = [Typography(f'Text {i}') for i in range(50)]
          container = Container(headers + texts)
          html = container.render()

          end_time = time.time()
          duration = end_time - start_time

          # Should complete within reasonable time (5 seconds for 100 components)
          assert duration < 5.0, f'Performance test failed: took {duration:.2f}s for 100 components'
          assert html.strip(), 'Performance test should produce valid output'

          print(f'✅ Performance test passed: {duration:.2f}s for 100 components')
          "
